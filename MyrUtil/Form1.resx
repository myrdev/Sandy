<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAAAIABoBAAANgAAABgYAAAAACAAiAkAAJ4EAAAgIAAAAAAgAKgQAAAmDgAAKAAAABAA
        AAAgAAAAAQAgAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkQAAcbkQAVmtE
        AHxtRQCRb0YAlW5FAIJrQwBfbEUAOwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpRgAzbEQAhGtD
        AGZtRACWbUYAoWxEAHhtRQCMbEUAnmpCAGxtRABsbSQABwAAAAAAAAAAAAAAAAAAAABsQAAobEMAUGxC
        AI5sQwB9cEgA7XBIAOpwRwDdcEgA825FALBrRQCFakUAb2xFAH0AAAAAAAAAAAAAAABuRAAebUQAimpE
        AIRtRgCfb0cApm1GAIdwRwC6cEcAwm9HAKFuRQBobkcA0GtFAIVrQwB5bkUAUQAAAAAAAAAAbUUAcmxG
        AItuRAB0bkcAqW9GAJlvRwCsbUQAS21FAD9tRQB+cUcA3m1EAGxuRwCwa0MAZm5EAIZVKgAGAAAAAG1D
        AG5sRQCgcEcA5GxFAIRwSADRa0IAPmtCAD5rQgA+a0IAPm5FAH1wRgC7cEcAvW1FAHNtRQB6bUIARnBA
        ABBvRwBzbUUAx3BIAOhtRQBGbUUAeW5FAG9uRQBvb0UAbm5EAHtuRQBvbkUAb2lCADpuRQBYbkUAWG1F
        AG5vSACubkYAeG1FAKZvRQB6b0UAN21BAFJsRABhcEUAO29FADdsRABabUQAYnBDADlvRQA3b0UAN29F
        ADdvRgBFb0cAvm1FAHluRQCwb0gA6HBHAKtwRwCWcEcAlnBHAJZwRwCWcEcAlnBHAJZwRwCWcEgA5m5G
        AMdvRwC5b0cAmnBFADBtRQB+a0IAd25FAIluRwCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZjsAHm9H
        AMFrRgBibUYAcF1GAAsAAAAAbEQAXmlEAHdsRQCjb0cAwW1FAHkAAAAAAAAAAAAAAAAAAAAAXjkAG29H
        AOtrRABia0UAenBHAHYAAAAAAAAAAGYzAAprQgBRbEIAe2tFAI9uRgCdcEkAz29GAKhvRgCcb0cAvm9G
        AMFsRQCQa0UAhWxFAH0AAAABAAAAAAAAAAAAAAAAfwAAAmtEAGlrRAB8ZUAARGtDAGZuRgCSbkYAu21F
        AI9sQwBjbEMAiW5EAIRkNwAXAAAAAAAAAAAAAAAAAAAAAAAAAABsRQAabEUAXG5GAHttRQCMbEQAf21G
        AIptRQCMbkYAgG1DAFtoRgAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYzAAVrQgAfcEQAKWhA
        ACBwQwAiakQAKWhGABYAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAA/H8AAOk/AADoHwAAgE8AAKOr
        AACHzwAAn/4AAL/+AACAAQAAz+8AAM/fAADgDwAA/E8AAPo/AAD//wAAKAAAABgAAAAwAAAAAQAgAAAA
        AAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYzAA9sRQBOb0YAfG5FAIRwRwCCb0YAg3BHAIJuRQBoaUEAJwAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbUEAUm5E
        AJ1uRQBka0QAXWtDAG5sRQB9bkYAe25CAFFrQgBka0YAfG1EAINpPAAiAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZAABRtRQCMakQAcWlCAFxsQwBqbUUAqW5FAKltRACKakMAamxE
        AIBvRgC1bEQAkmtFAGRtRQCfakMAQQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcEAAIG5E
        AHtrQwBmbEQAmW5GAKBuRACAbUYAdW5HAJdvRgCqcEYApG9GAI5vRQCBbEUAk21FAKZrRABwbEUAl2tE
        AFNgIAAIAAAAAAAAAAAAAAAAAAAAAAAAAABmQAAUbEQAcW1EAHxrRQBkbUUAiG5GAJlvRwDFb0gAvHBH
        AKhwSACkbkYAp3BHAKlwSADGbkcAtGxHAIltRQCUa0MAemxDAH1sRQBOAAAAAQAAAAAAAAAAAAAAAGBA
        AAhuQwBIbUMAgWtEAHxrRABtbkgAp29GAM9vRwB+bkYAhm9GAJhwSACpcEgApG1GAI5tRwCBb0UAmm9I
        AMRtRQCTbEMAkGdCAGVtRQCBa0EAKwAAAAAAAAAAAAAAAGlDAC5tRQCYbEUAhGxCAHRuRQCpb0cA0GhD
        AFhuRwCtb0cA1W9GALVuRwCUcEYAnXBFAMZwRwDUbkYAi25GAJJuRgDSakQAbG5FAIJsRACEb0QAZQAA
        AAIAAAAAAAAAAG1DAFttRACOa0QAmmxGAJJvRwDbbEIASXFGALxvRwDRbEYASWM5ABJqQAAMWzcADmhC
        ABttRAB8b0cA4m1FAHNwRwC0b0YAvGpEAE9pQwBXbUQAZWxAACgAAAAAAAAAAG9GAIdrQgBdbEYAhm9H
        AK9vSACjbEYAe3BIAPFpQwBfZDcAHGQ3ABxkNwAcZDcAHGQ3ABxjPgApbkcAl29HAMltRQBycEkA7mdB
        AEpsRAB0bUUAem5FAFFmMwAKAAAAAHBHAIlsQgBVa0MAgXBIAL9tRgBibkcAtnFIAOBwSADccEkA3XBJ
        AN1wSQDccEkA3G9IAOBwSADccEcA3W9HANxrQwBFcEkAwXBIANhwSADYcEgA2HFIANtvRwDTbEUAO29G
        AI5uRQBvb0UAn3BIAMRpRQA/a0MAOW9EAF5tRwB3bUUAcm5EAFZtRQA/bUUAP21FAHJtRQBybkQAbW1C
        AE1gNQAYZz0AKnBFADBwRQAwcEUAMG5GADpwRwCocEcAq21GAJVtRQBzbkUAhG5GAHtxRQBGcUEAK21D
        AERsRgBxbkMAZm5BAENxQQArcUEAK2pDAFtuQwBrbUIAYG9BADdxQQArcUEAK3FBACtxQQArcUEAK2tH
        ADJwSACgcEcAum9GAJxtRQBzbEQAh25HAJZwSADKcEgAynBIAMpwRwDLcEcAy3BIAMpwSADKcEgAynBI
        AMpwRwDLcEgAynBIAMpwSADKcEgAynBIAMpwSADKcEgAym9IAM5vRwDSbkUASm5FAI9uQgBkbUQApG5H
        ALdvRwC4bUAAOGxBAC9sQQAvbEEAL2xBAC9sQQAvbEEAL2xBAC9sQQAvbEEAL2xBAC9tRQBucEcA8mxF
        AIRrRQCfbEUAiW5EAGFtQAAcQEAABG9FAIhtRACHa0MAeWxGAIBvRwDcaUAAOAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFUqAAZvRgCqbkcAwmhCAFFtRQBnbUUAZ3FBACsAAAAAAAAAAG1E
        AEtuRACLbEMAY21FAIhwRwC2b0YAzm1DACoAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZjMAD21F
        AHlvSADVaEAAU2xEAI5vRQCmb0UAZwAAAAIAAAAAAAAAAGAwABBtRABLa0MAiG1EAJpuRQCCbkcAtm5G
        AMtuRwBaaEAAIEBAAAQAAAAAAAAAAHEcAAlsRQA0bUcAhW9HAMhsRgCSakQAcWlCAGhsRgB7bUQAMQAA
        AAAAAAAAAAAAAAAAAABvQwAXa0MAa2tDAIFtRQCYakIAf25HAKJxSADHb0gAsG5GAItuRgB4bUUAfm9G
        AJVwRwC/b0cAum1FAJRtRQCca0UAfmtEAHxpQwBXAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABZz4AJWxE
        AH9qRQB2a0UAjGhAAFNrQwBrbUUAgXBGAKFvRwDcbkYAwG1GAKNtRQB6bUUAhW5FAK5tRACObkQAmWxC
        AFxdRgALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmY7AB5tRACKbUQAcF07AB5sRQB2bkYAoG1F
        AK1tRQCabEYAum1GALNrRQCaa0MAcmpDAGNuRQCebkEASkkkAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAJaPAARb0YAY29GAJxtRQB6bUUAem1GAHxrQwBrbkUAhG1EAGxtRACDbEYAjW9F
        AIhsQQAvVSoABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSoADHBD
        AERtRQB5b0YAfG5GAGZsRABebkYAZm9FAHpuRgB0bEYAQmYzAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD/h/8A/f7/APcR
        fwD4gL8A+AB/ANkALwCSAE8AhP0/AEX8vwBIAIEAT//8AF///ABAAAEAR/+HACf/PwCj/08Awfx/AOQw
        fwD7BD8A9wN/AP3o/wD///8A////ACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVAAADbUUAP29H
        AIVvRwCwbkcAsm9IAK5vSACub0cAsHBGALJuRwCtb0cAd25GACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbkMAQW5G
        ALtvRgC1bUMAW2U8ACZoQABAakIAYGxCAGFvRwCMaEAALGpCAFlsRwBob0YAwW9HAKVrQQArAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSoABm5H
        AMhvSACmXkIAG2xFAE5sRACEbUYAnGxFALZxSAD0b0YAkW5HAJRsRgBXb0cAuW1HALtqQgBNXTsAHnBH
        AN1sRgCNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhA
        ACxuRgDSaEIAQmtDAHVvRwC4bkYAsmxAAEBnQwBUa0EAN2lEAEtsQgBJZT8ANWE8ACJsRgBqb0cAxmxF
        ALFvRQC4akUAc2dEAGVuRgC8VRwACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABvQwAubkYAwGtHACtuRwC3bUYAvm1GAJZtRABSbUUAeXBHAMtwSAD0cUkA/XFJAP1wSQD8cEgA7m9I
        AL5tRABwbUUAZ25GAI1vRwCmakYAY2tEAGJuRgC8QAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAMwAABXBGAMBpQwBEbkQAhmlBAEtsRQB2bEYAY29HAPZxSQD9cEgA329HAMFuSACZbkcAhG5F
        AKVwSADGcUcA6HFJAP1wRwDfZ0MASG5HAJ5tRwC2akYAcWpDAFtvRQC9QEAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABwRwDCa0UAemxFALxuRgDnZEEAM29GAKNxSQD9cEcA9mlDAEQAAAAAbDsAGmxG
        AIZvRwCebUYAcEwzAAp/AAACbEQAeHBJAPxxSQD8bUcAc25FAKlvRwDNZz0AKm1EAI5mQQA3AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAZEAAHG5HAMJvRQCBaz8AOWhDAGdvRgCncUkA+29HALdkQwAXbkYAi29H
        AOJxSQD7cUkA/XFJAP1xSQD9cUgA+XBIANhoRABWZ0MAKm9HAN1xSAD5bEYAY2dDAFdtRQCtaUYAV3BI
        AN9gQAAQAAAAAAAAAAAAAAAAAAAAAHE5AAluRgC2Zz8AOW5GAKduRwCta0MARXFIAPpuSAC1YzoAH29G
        ALVwSAD8cEcA8m5HAJRvRgB1cEYAYnBIAHtvRgCqcUkA/XFJAP1uRwCUaUEAJ29HAOtwRwD6akUAWW5F
        AIJoRQBObkYAi25FAGQAAAAAAAAAAAAAAAAAAAAAa0EAK3BHANtpRAA4bkYA0mdBAFJvRwD3cEkA9WlB
        ACduRgCncEgA/G9HAMloOgAWAAAAAAAAAAAAAAAAAAAAAAAAAABjRAApb0kA43FJAP1tRgCHa0EAK3FI
        APhuRwCeakQAT25FAKJAIAAIb0cAzQAAAAAAAAAAAAAAAAAAAABvRwCQbkcAgm5HANhuRgDMbkQAXXFK
        AP1qRgBjb0UAc3FJAP1vSADcVVUAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEcUkA6nBH
        APpmQAAUcEcAz3FKAP1mQAAUQAAABGBEAC1vSgCiZjMADwAAAAAAAAAAAAAAAHBHALNkQAAcbUQAtGlD
        AFBuRwCbcUkA9W9DABdwRwDIcUkA/W9IANxvSQDHb0kAx29JAMdvSQDHb0kAx29JAMdvSQDHb0kAx29J
        AMdwRwDpcUkA/W9FALxlQgA6cUkA/XBIANtySQD5cEYA9nBHAOhwRwDWb0YAvHBIADkAAAAAcEcAxXBA
        ABBrRwCFa0IAUXBJAO9wSQDfVSoADG9HAOFxRwDkcUcA5HFHAORxRwDkcUcA5HFHAORxRwDkcUcA5HFH
        AORxRwDkcUcA5HFHAORxRwDkb0gAzm1JAAdwSADEcUgAzXFIAM1xSADNcUgAzXBIAM5wSQD8cUkA+29G
        AD5wRwC9ZkAAFGxEAIBoRABHcEkA/XBHAMwAAAAAAAAAAGNEAClmQgAjAAAAAGhAACBkQQAzAAAAAAAA
        AAAAAAAAbEQARyoAAAYAAAAAaEIANmZAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGFJ
        ABVwSQDyb0gAmW5IALRsRgAocUgA+mxGAGNxSQD8cEcAyAAAAAAAAAAAAAAAAW1GAOZwSQD8b0cAxgAA
        AAAAAAAAAAAAAAAAAABrQQArcEcA/HBJAPxtRgBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAfwAAAnFJAOBvRgDTbkcAy2pEADxuRQCpa0MATG5EAHRxRgB4cUYAeHFGAHhxRgB4cUYAeG1G
        AHxxRgB4cUYAeHFGAHhxRgB4cUYAeHFGAHhxRgB4cEUAeXFGAHhxRgB4cUYAeHFGAHhxRgB4cUYAeHFG
        AHhxRgB4cUYAeG1FAHlvSQDEcEgA/G9HAHpxRwDJaDoAFm9FAMRoRQA7b0gAx3FJAP1xSQD9cUkA/XFJ
        AP1xSQD9cUkA/XFJAP1xSQD9cUkA/XFJAP1xSQD9cUkA/XFJAP1xSQD9cUkA/XFJAP1xSQD9cUkA/XFJ
        AP5xSQD9cUkA/XFJAP1xSQD9cUkA/XBIAPpxRwCiYEAAEG9HALppRgA6bkcAymxHALdtRwBscUkA/GZC
        AEZeOQAbXjkAG145ABteOQAbXjkAG145ABteOQAbXjkAG145ABteOQAbXjkAG145ABteOQAbXjkAG145
        ABtvRgCvcUkA/WpDAHZuRgDHakQAZW5HAKloPwBRAAAAAQAAAAAAAAAAbkUAj21GANRrRwB+b0YA4WJD
        ADlxSQD+b0gA4gAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAaTwAEXBIAO5vSADtKioABnFFAJ5rQQA3cEcAzQAAAAAAAAAAAAAAAAAAAABqPgAdb0gA62lE
        ADhsQgBcbUUAcnBFAI9xSQD9a0YAZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAFtSACxcEkA/GtEAF1vSAC1bkcAsGdDACpvRQCIAAAAAAAAAAAAAAAAAAAAAEkk
        AAdqRABPakUAb21GAKFvRgCxZkIARnBIAONwRwD3bkcAWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAADbkYAjXFJAP1uRwCwbEMAV2hFAE5uRACLcEcA021HADYAAAAAAAAAAAAA
        AAAAAAAAAAAAAFU5AAlvRgDdZj0AMm1FALFvRwDKY0QAMW9HAONwSAD7bkYAeGk8ABEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAakYAHW9HALBwSQD8b0YAzmRDAC5pQgA6bUUAm2tGAHBtRgCzAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFU9ABVwSADAZ0UANG9GAMRvSADHXEAAJG9HAOFxSQD9cUoA/W1I
        AIdZNwAXAAAAAAAAAAAAAAABYD4AJW9HAKxwSQD8ckoA/W5HALZpQQAnb0cA5W5GALxkQwA9b0cA6lo8
        ABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG5EAHRtRgCdbEQAe21FAMZtRgCRa0MAbmxF
        AFxwSADqcUoA/XBJAP1vRwDycUkA6nBIAPVxSgD9cUkA/XBIANdoRgBMa0cAd21HALRuRgCdZkQAPG9H
        AMZrRwAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxEAH9uRgCga0QAVm5G
        AJlsRQBcZ0AANFw9ABluRQBrbUcAenBGAKBwSAD5b0YAp21GAIdsRABhbkQAWm5FAJBuRgDXbkUAp2hA
        AEBvRwC/bEMAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG1H
        AGVtRgDMZ0MAOUkkAAduRgC7bUQAaW1FAMZvRgCxa0UAn2xHAJBtRgC6bkcAy25HALRuRwDUbkQAXWpD
        AFtrQQBKb0YA0mtDADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEkkAAdwRwDNb0cAv2VCADpuRgCgbkUAtG5HALduSACtbkcAnnBIAMRtRQCqbkYA42RG
        AEJpQQA/b0cA2W5GAKt/QAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAARuQQAzbkQAmW9IAM5uSAC8bUUAeWxGAGNsQwBXa0MAZm1I
        AIdvRwDQb0cAzGxFAH1qRwAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkQAAcb0YATHBHAGtxRwBvcUgAam9I
        AGpwSABtcEYAaW1FAE1sRgAhVSoABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////wD///z7n//zAmf/7P8b/9GAzf+uACb/SOeS/zEAzX6SH
        CV+pH8SvCz/k71IAAgNSAAIBU////FOPn/xf///5UAAAAUv//K8p//yvuf/5L+T/8Z/Sf+Nf6Q+Ev/TA
        GX/6+GL//aAd//5AM///jx////////////8=
</value>
  </data>
</root>